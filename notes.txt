I will write my notes on my learning about computer vision for self driving cars here

Perception

Road Segmentation - Convulated Neural Network

- given input = find road present in image
- obvisouly dont want to hard code b/c that would only work on one image
- fully convuly nerual netowrk
  - fully end to end
  - no pre processing or post processing on image
- road image -> fcn model -> binary image (1 for road, 0 for not road)
- upsampling : decide on what values to be on NxN squares
  - bed of nails : assign all original image block value to upsample block values 
    - simple and make a lot of zeroes
  - nearest neighbor
  - interpolation
    - assigning values of blocks through averages
    - take average between the nearest neighbors of blocks
  - transposed convulations
    - assign values based on filter
      - random weight values
    - backpropagation

- mask background with binary values and bitwise and 

Perceptron
- most basic form of NN 
- random data to start, find error and slowly move to lower the error 
  - correctly classified points get very small penalties
  - wrong classifications are high penalties
- input nodes::linear function::score::0 or 1::output
  - discrete values
    - we can show continous probabilties with activation function 
      - using Sigmoid function
      - gives percentage like 0.57 instead of 0 or 1
- each input is multiplied by their respective weights
- supervised = labeled data
- unsupervised = unlalbeled data 
- linear regression - Supervised learning 
  - response variable
  - explanatory (independent) variable
  - looking to find a linear relationship
- bigger cross entropy score is bad 
- smalled the cross entroy score the better
- calculates the error
- gradient descent = minimize the error 
- gradient is derivative with respect to weights
- calculate error function, subtract gradient, reducing error 
- derivative gradient = (points * (probabilties - label)) / # of points 
- subtracting value from linear parameters results new weights
  - which has a smaller error function 
  - very small steps
  - small value down = learning rate like 0.01 
- classification
  - takes input and classifies it 
    - generally calculates possibility it is a classification
  - could be used if something is a car/person/sign
  - seperates into discreete classes 
  -    

2D Object Detection - YOLO


